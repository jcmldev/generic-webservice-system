
package dd.gwswrapper;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-2b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "GWS", targetNamespace = "http://genericws.dd/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface GWS {


    /**
     * 
     * @param messageDepependenceList
     * @param methodId
     * @return
     *     returns javax.xml.ws.Response<dd.gwswrapper.InvokeMethodResponse>
     */
    @WebMethod(operationName = "invokeMethod")
    @RequestWrapper(localName = "invokeMethod", targetNamespace = "http://genericws.dd/", className = "dd.gwswrapper.InvokeMethod")
    @ResponseWrapper(localName = "invokeMethodResponse", targetNamespace = "http://genericws.dd/", className = "dd.gwswrapper.InvokeMethodResponse")
    public Response<InvokeMethodResponse> invokeMethodAsync(
        @WebParam(name = "methodId", targetNamespace = "")
        int methodId,
        @WebParam(name = "messageDepependenceList", targetNamespace = "")
        String messageDepependenceList);

    /**
     * 
     * @param asyncHandler
     * @param messageDepependenceList
     * @param methodId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "invokeMethod")
    @RequestWrapper(localName = "invokeMethod", targetNamespace = "http://genericws.dd/", className = "dd.gwswrapper.InvokeMethod")
    @ResponseWrapper(localName = "invokeMethodResponse", targetNamespace = "http://genericws.dd/", className = "dd.gwswrapper.InvokeMethodResponse")
    public Future<?> invokeMethodAsync(
        @WebParam(name = "methodId", targetNamespace = "")
        int methodId,
        @WebParam(name = "messageDepependenceList", targetNamespace = "")
        String messageDepependenceList,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<InvokeMethodResponse> asyncHandler);

    /**
     * 
     * @param messageDepependenceList
     * @param methodId
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "invokeMethod", targetNamespace = "http://genericws.dd/", className = "dd.gwswrapper.InvokeMethod")
    @ResponseWrapper(localName = "invokeMethodResponse", targetNamespace = "http://genericws.dd/", className = "dd.gwswrapper.InvokeMethodResponse")
    @Action(input = "http://genericws.dd/GWS/invokeMethodRequest", output = "http://genericws.dd/GWS/invokeMethodResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://genericws.dd/GWS/invokeMethod/Fault/Exception")
    })
    public String invokeMethod(
        @WebParam(name = "methodId", targetNamespace = "")
        int methodId,
        @WebParam(name = "messageDepependenceList", targetNamespace = "")
        String messageDepependenceList)
        throws Exception_Exception
    ;

}
