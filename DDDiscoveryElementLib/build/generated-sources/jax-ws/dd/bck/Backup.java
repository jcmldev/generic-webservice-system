
package dd.bck;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Backup", targetNamespace = "http://dd/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Backup {


    /**
     * 
     * @param fromTimestamp
     * @param toTimestamp
     * @param dependentServiceId
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPMultihopGetInterDependenciesForTimeWindowResponse>
     */
    @WebMethod(operationName = "GP_Multihop_getInterDependenciesForTimeWindow")
    @RequestWrapper(localName = "GP_Multihop_getInterDependenciesForTimeWindow", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetInterDependenciesForTimeWindow")
    @ResponseWrapper(localName = "GP_Multihop_getInterDependenciesForTimeWindowResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetInterDependenciesForTimeWindowResponse")
    public Response<GPMultihopGetInterDependenciesForTimeWindowResponse> gpMultihopGetInterDependenciesForTimeWindowAsync(
        @WebParam(name = "dependentServiceId", targetNamespace = "")
        String dependentServiceId,
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp);

    /**
     * 
     * @param fromTimestamp
     * @param asyncHandler
     * @param toTimestamp
     * @param dependentServiceId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_Multihop_getInterDependenciesForTimeWindow")
    @RequestWrapper(localName = "GP_Multihop_getInterDependenciesForTimeWindow", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetInterDependenciesForTimeWindow")
    @ResponseWrapper(localName = "GP_Multihop_getInterDependenciesForTimeWindowResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetInterDependenciesForTimeWindowResponse")
    public Future<?> gpMultihopGetInterDependenciesForTimeWindowAsync(
        @WebParam(name = "dependentServiceId", targetNamespace = "")
        String dependentServiceId,
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPMultihopGetInterDependenciesForTimeWindowResponse> asyncHandler);

    /**
     * 
     * @param fromTimestamp
     * @param toTimestamp
     * @param dependentServiceId
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod(operationName = "GP_Multihop_getInterDependenciesForTimeWindow")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GP_Multihop_getInterDependenciesForTimeWindow", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetInterDependenciesForTimeWindow")
    @ResponseWrapper(localName = "GP_Multihop_getInterDependenciesForTimeWindowResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetInterDependenciesForTimeWindowResponse")
    @Action(input = "http://dd/Backup/GP_Multihop_getInterDependenciesForTimeWindowRequest", output = "http://dd/Backup/GP_Multihop_getInterDependenciesForTimeWindowResponse")
    public List<String> gpMultihopGetInterDependenciesForTimeWindow(
        @WebParam(name = "dependentServiceId", targetNamespace = "")
        String dependentServiceId,
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp);

    /**
     * 
     * @param fromTimestamp
     * @param toTimestamp
     * @param dependentServiceId
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPMultihopGetInterDependenciesForTimeWindowAntecedentResponse>
     */
    @WebMethod(operationName = "GP_Multihop_getInterDependenciesForTimeWindowAntecedent")
    @RequestWrapper(localName = "GP_Multihop_getInterDependenciesForTimeWindowAntecedent", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetInterDependenciesForTimeWindowAntecedent")
    @ResponseWrapper(localName = "GP_Multihop_getInterDependenciesForTimeWindowAntecedentResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetInterDependenciesForTimeWindowAntecedentResponse")
    public Response<GPMultihopGetInterDependenciesForTimeWindowAntecedentResponse> gpMultihopGetInterDependenciesForTimeWindowAntecedentAsync(
        @WebParam(name = "dependentServiceId", targetNamespace = "")
        String dependentServiceId,
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp);

    /**
     * 
     * @param fromTimestamp
     * @param asyncHandler
     * @param toTimestamp
     * @param dependentServiceId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_Multihop_getInterDependenciesForTimeWindowAntecedent")
    @RequestWrapper(localName = "GP_Multihop_getInterDependenciesForTimeWindowAntecedent", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetInterDependenciesForTimeWindowAntecedent")
    @ResponseWrapper(localName = "GP_Multihop_getInterDependenciesForTimeWindowAntecedentResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetInterDependenciesForTimeWindowAntecedentResponse")
    public Future<?> gpMultihopGetInterDependenciesForTimeWindowAntecedentAsync(
        @WebParam(name = "dependentServiceId", targetNamespace = "")
        String dependentServiceId,
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPMultihopGetInterDependenciesForTimeWindowAntecedentResponse> asyncHandler);

    /**
     * 
     * @param fromTimestamp
     * @param toTimestamp
     * @param dependentServiceId
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod(operationName = "GP_Multihop_getInterDependenciesForTimeWindowAntecedent")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GP_Multihop_getInterDependenciesForTimeWindowAntecedent", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetInterDependenciesForTimeWindowAntecedent")
    @ResponseWrapper(localName = "GP_Multihop_getInterDependenciesForTimeWindowAntecedentResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetInterDependenciesForTimeWindowAntecedentResponse")
    @Action(input = "http://dd/Backup/GP_Multihop_getInterDependenciesForTimeWindowAntecedentRequest", output = "http://dd/Backup/GP_Multihop_getInterDependenciesForTimeWindowAntecedentResponse")
    public List<String> gpMultihopGetInterDependenciesForTimeWindowAntecedent(
        @WebParam(name = "dependentServiceId", targetNamespace = "")
        String dependentServiceId,
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp);

    /**
     * 
     * @param nodeId
     * @param serviceId
     * @param fromTimestamp
     * @param toTimestamp
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPGetInterDependenciesForTimeWindowResponse>
     */
    @WebMethod(operationName = "GP_getInterDependenciesForTimeWindow")
    @RequestWrapper(localName = "GP_getInterDependenciesForTimeWindow", targetNamespace = "http://dd/", className = "dd.bck.GPGetInterDependenciesForTimeWindow")
    @ResponseWrapper(localName = "GP_getInterDependenciesForTimeWindowResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetInterDependenciesForTimeWindowResponse")
    public Response<GPGetInterDependenciesForTimeWindowResponse> gpGetInterDependenciesForTimeWindowAsync(
        @WebParam(name = "nodeId", targetNamespace = "")
        String nodeId,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp);

    /**
     * 
     * @param nodeId
     * @param serviceId
     * @param fromTimestamp
     * @param asyncHandler
     * @param toTimestamp
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_getInterDependenciesForTimeWindow")
    @RequestWrapper(localName = "GP_getInterDependenciesForTimeWindow", targetNamespace = "http://dd/", className = "dd.bck.GPGetInterDependenciesForTimeWindow")
    @ResponseWrapper(localName = "GP_getInterDependenciesForTimeWindowResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetInterDependenciesForTimeWindowResponse")
    public Future<?> gpGetInterDependenciesForTimeWindowAsync(
        @WebParam(name = "nodeId", targetNamespace = "")
        String nodeId,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPGetInterDependenciesForTimeWindowResponse> asyncHandler);

    /**
     * 
     * @param nodeId
     * @param serviceId
     * @param fromTimestamp
     * @param toTimestamp
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod(operationName = "GP_getInterDependenciesForTimeWindow")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GP_getInterDependenciesForTimeWindow", targetNamespace = "http://dd/", className = "dd.bck.GPGetInterDependenciesForTimeWindow")
    @ResponseWrapper(localName = "GP_getInterDependenciesForTimeWindowResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetInterDependenciesForTimeWindowResponse")
    @Action(input = "http://dd/Backup/GP_getInterDependenciesForTimeWindowRequest", output = "http://dd/Backup/GP_getInterDependenciesForTimeWindowResponse")
    public List<String> gpGetInterDependenciesForTimeWindow(
        @WebParam(name = "nodeId", targetNamespace = "")
        String nodeId,
        @WebParam(name = "serviceId", targetNamespace = "")
        String serviceId,
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp);

    /**
     * 
     * @param dependentIp
     * @return
     *     returns javax.xml.ws.Response<dd.bck.DKLGetAntecedentServicesOfDependentIpResponse>
     */
    @WebMethod(operationName = "DKL_getAntecedentServicesOfDependentIp")
    @RequestWrapper(localName = "DKL_getAntecedentServicesOfDependentIp", targetNamespace = "http://dd/", className = "dd.bck.DKLGetAntecedentServicesOfDependentIp")
    @ResponseWrapper(localName = "DKL_getAntecedentServicesOfDependentIpResponse", targetNamespace = "http://dd/", className = "dd.bck.DKLGetAntecedentServicesOfDependentIpResponse")
    public Response<DKLGetAntecedentServicesOfDependentIpResponse> dklGetAntecedentServicesOfDependentIpAsync(
        @WebParam(name = "dependentIp", targetNamespace = "")
        String dependentIp);

    /**
     * 
     * @param dependentIp
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "DKL_getAntecedentServicesOfDependentIp")
    @RequestWrapper(localName = "DKL_getAntecedentServicesOfDependentIp", targetNamespace = "http://dd/", className = "dd.bck.DKLGetAntecedentServicesOfDependentIp")
    @ResponseWrapper(localName = "DKL_getAntecedentServicesOfDependentIpResponse", targetNamespace = "http://dd/", className = "dd.bck.DKLGetAntecedentServicesOfDependentIpResponse")
    public Future<?> dklGetAntecedentServicesOfDependentIpAsync(
        @WebParam(name = "dependentIp", targetNamespace = "")
        String dependentIp,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DKLGetAntecedentServicesOfDependentIpResponse> asyncHandler);

    /**
     * 
     * @param dependentIp
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod(operationName = "DKL_getAntecedentServicesOfDependentIp")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "DKL_getAntecedentServicesOfDependentIp", targetNamespace = "http://dd/", className = "dd.bck.DKLGetAntecedentServicesOfDependentIp")
    @ResponseWrapper(localName = "DKL_getAntecedentServicesOfDependentIpResponse", targetNamespace = "http://dd/", className = "dd.bck.DKLGetAntecedentServicesOfDependentIpResponse")
    @Action(input = "http://dd/Backup/DKL_getAntecedentServicesOfDependentIpRequest", output = "http://dd/Backup/DKL_getAntecedentServicesOfDependentIpResponse")
    public List<String> dklGetAntecedentServicesOfDependentIp(
        @WebParam(name = "dependentIp", targetNamespace = "")
        String dependentIp);

    /**
     * 
     * @param clientProcessId
     * @param dependenceTimestamp
     * @param frontEndServiceId
     * @return
     *     returns javax.xml.ws.Response<dd.bck.MonitorRecordClientDependenceResponse>
     */
    @WebMethod(operationName = "Monitor_recordClientDependence")
    @RequestWrapper(localName = "Monitor_recordClientDependence", targetNamespace = "http://dd/", className = "dd.bck.MonitorRecordClientDependence")
    @ResponseWrapper(localName = "Monitor_recordClientDependenceResponse", targetNamespace = "http://dd/", className = "dd.bck.MonitorRecordClientDependenceResponse")
    public Response<MonitorRecordClientDependenceResponse> monitorRecordClientDependenceAsync(
        @WebParam(name = "clientProcessId", targetNamespace = "")
        String clientProcessId,
        @WebParam(name = "frontEndServiceId", targetNamespace = "")
        String frontEndServiceId,
        @WebParam(name = "dependenceTimestamp", targetNamespace = "")
        long dependenceTimestamp);

    /**
     * 
     * @param clientProcessId
     * @param dependenceTimestamp
     * @param asyncHandler
     * @param frontEndServiceId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "Monitor_recordClientDependence")
    @RequestWrapper(localName = "Monitor_recordClientDependence", targetNamespace = "http://dd/", className = "dd.bck.MonitorRecordClientDependence")
    @ResponseWrapper(localName = "Monitor_recordClientDependenceResponse", targetNamespace = "http://dd/", className = "dd.bck.MonitorRecordClientDependenceResponse")
    public Future<?> monitorRecordClientDependenceAsync(
        @WebParam(name = "clientProcessId", targetNamespace = "")
        String clientProcessId,
        @WebParam(name = "frontEndServiceId", targetNamespace = "")
        String frontEndServiceId,
        @WebParam(name = "dependenceTimestamp", targetNamespace = "")
        long dependenceTimestamp,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<MonitorRecordClientDependenceResponse> asyncHandler);

    /**
     * 
     * @param clientProcessId
     * @param dependenceTimestamp
     * @param frontEndServiceId
     */
    @WebMethod(operationName = "Monitor_recordClientDependence")
    @RequestWrapper(localName = "Monitor_recordClientDependence", targetNamespace = "http://dd/", className = "dd.bck.MonitorRecordClientDependence")
    @ResponseWrapper(localName = "Monitor_recordClientDependenceResponse", targetNamespace = "http://dd/", className = "dd.bck.MonitorRecordClientDependenceResponse")
    @Action(input = "http://dd/Backup/Monitor_recordClientDependenceRequest", output = "http://dd/Backup/Monitor_recordClientDependenceResponse")
    public void monitorRecordClientDependence(
        @WebParam(name = "clientProcessId", targetNamespace = "")
        String clientProcessId,
        @WebParam(name = "frontEndServiceId", targetNamespace = "")
        String frontEndServiceId,
        @WebParam(name = "dependenceTimestamp", targetNamespace = "")
        long dependenceTimestamp);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPGetDependentHostsResponse>
     */
    @WebMethod(operationName = "GP_getDependentHosts")
    @RequestWrapper(localName = "GP_getDependentHosts", targetNamespace = "http://dd/", className = "dd.bck.GPGetDependentHosts")
    @ResponseWrapper(localName = "GP_getDependentHostsResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetDependentHostsResponse")
    public Response<GPGetDependentHostsResponse> gpGetDependentHostsAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_getDependentHosts")
    @RequestWrapper(localName = "GP_getDependentHosts", targetNamespace = "http://dd/", className = "dd.bck.GPGetDependentHosts")
    @ResponseWrapper(localName = "GP_getDependentHostsResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetDependentHostsResponse")
    public Future<?> gpGetDependentHostsAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPGetDependentHostsResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod(operationName = "GP_getDependentHosts")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GP_getDependentHosts", targetNamespace = "http://dd/", className = "dd.bck.GPGetDependentHosts")
    @ResponseWrapper(localName = "GP_getDependentHostsResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetDependentHostsResponse")
    @Action(input = "http://dd/Backup/GP_getDependentHostsRequest", output = "http://dd/Backup/GP_getDependentHostsResponse")
    public List<String> gpGetDependentHosts();

    /**
     * 
     * @param timeSlotSize
     * @param fromTimestamp
     * @param toTimestamp
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPGetBackupDataResponse>
     */
    @WebMethod(operationName = "GP_getBackupData")
    @RequestWrapper(localName = "GP_getBackupData", targetNamespace = "http://dd/", className = "dd.bck.GPGetBackupData")
    @ResponseWrapper(localName = "GP_getBackupDataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetBackupDataResponse")
    public Response<GPGetBackupDataResponse> gpGetBackupDataAsync(
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp,
        @WebParam(name = "timeSlotSize", targetNamespace = "")
        int timeSlotSize);

    /**
     * 
     * @param timeSlotSize
     * @param fromTimestamp
     * @param asyncHandler
     * @param toTimestamp
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_getBackupData")
    @RequestWrapper(localName = "GP_getBackupData", targetNamespace = "http://dd/", className = "dd.bck.GPGetBackupData")
    @ResponseWrapper(localName = "GP_getBackupDataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetBackupDataResponse")
    public Future<?> gpGetBackupDataAsync(
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp,
        @WebParam(name = "timeSlotSize", targetNamespace = "")
        int timeSlotSize,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPGetBackupDataResponse> asyncHandler);

    /**
     * 
     * @param timeSlotSize
     * @param fromTimestamp
     * @param toTimestamp
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod(operationName = "GP_getBackupData")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GP_getBackupData", targetNamespace = "http://dd/", className = "dd.bck.GPGetBackupData")
    @ResponseWrapper(localName = "GP_getBackupDataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetBackupDataResponse")
    @Action(input = "http://dd/Backup/GP_getBackupDataRequest", output = "http://dd/Backup/GP_getBackupDataResponse")
    public List<String> gpGetBackupData(
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp,
        @WebParam(name = "timeSlotSize", targetNamespace = "")
        int timeSlotSize);

    /**
     * 
     * @param nodeId
     * @param timeSlotSize
     * @param fromTimestamp
     * @param backupData
     * @param toTimestamp
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPStoreBackupDataResponse>
     */
    @WebMethod(operationName = "GP_storeBackupData")
    @RequestWrapper(localName = "GP_storeBackupData", targetNamespace = "http://dd/", className = "dd.bck.GPStoreBackupData")
    @ResponseWrapper(localName = "GP_storeBackupDataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPStoreBackupDataResponse")
    public Response<GPStoreBackupDataResponse> gpStoreBackupDataAsync(
        @WebParam(name = "nodeId", targetNamespace = "")
        String nodeId,
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp,
        @WebParam(name = "timeSlotSize", targetNamespace = "")
        int timeSlotSize,
        @WebParam(name = "backupData", targetNamespace = "")
        List<String> backupData);

    /**
     * 
     * @param nodeId
     * @param timeSlotSize
     * @param fromTimestamp
     * @param backupData
     * @param asyncHandler
     * @param toTimestamp
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_storeBackupData")
    @RequestWrapper(localName = "GP_storeBackupData", targetNamespace = "http://dd/", className = "dd.bck.GPStoreBackupData")
    @ResponseWrapper(localName = "GP_storeBackupDataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPStoreBackupDataResponse")
    public Future<?> gpStoreBackupDataAsync(
        @WebParam(name = "nodeId", targetNamespace = "")
        String nodeId,
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp,
        @WebParam(name = "timeSlotSize", targetNamespace = "")
        int timeSlotSize,
        @WebParam(name = "backupData", targetNamespace = "")
        List<String> backupData,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPStoreBackupDataResponse> asyncHandler);

    /**
     * 
     * @param nodeId
     * @param timeSlotSize
     * @param fromTimestamp
     * @param backupData
     * @param toTimestamp
     */
    @WebMethod(operationName = "GP_storeBackupData")
    @RequestWrapper(localName = "GP_storeBackupData", targetNamespace = "http://dd/", className = "dd.bck.GPStoreBackupData")
    @ResponseWrapper(localName = "GP_storeBackupDataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPStoreBackupDataResponse")
    @Action(input = "http://dd/Backup/GP_storeBackupDataRequest", output = "http://dd/Backup/GP_storeBackupDataResponse")
    public void gpStoreBackupData(
        @WebParam(name = "nodeId", targetNamespace = "")
        String nodeId,
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp,
        @WebParam(name = "timeSlotSize", targetNamespace = "")
        int timeSlotSize,
        @WebParam(name = "backupData", targetNamespace = "")
        List<String> backupData);

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPGetMetadataResponse>
     */
    @WebMethod(operationName = "GP_getMetadata")
    @RequestWrapper(localName = "GP_getMetadata", targetNamespace = "http://dd/", className = "dd.bck.GPGetMetadata")
    @ResponseWrapper(localName = "GP_getMetadataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetMetadataResponse")
    public Response<GPGetMetadataResponse> gpGetMetadataAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_getMetadata")
    @RequestWrapper(localName = "GP_getMetadata", targetNamespace = "http://dd/", className = "dd.bck.GPGetMetadata")
    @ResponseWrapper(localName = "GP_getMetadataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetMetadataResponse")
    public Future<?> gpGetMetadataAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPGetMetadataResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod(operationName = "GP_getMetadata")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GP_getMetadata", targetNamespace = "http://dd/", className = "dd.bck.GPGetMetadata")
    @ResponseWrapper(localName = "GP_getMetadataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetMetadataResponse")
    @Action(input = "http://dd/Backup/GP_getMetadataRequest", output = "http://dd/Backup/GP_getMetadataResponse")
    public List<String> gpGetMetadata();

    /**
     * 
     * @param nodeId
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPGetBackupTargetsOfNodeResponse>
     */
    @WebMethod(operationName = "GP_getBackupTargetsOfNode")
    @RequestWrapper(localName = "GP_getBackupTargetsOfNode", targetNamespace = "http://dd/", className = "dd.bck.GPGetBackupTargetsOfNode")
    @ResponseWrapper(localName = "GP_getBackupTargetsOfNodeResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetBackupTargetsOfNodeResponse")
    public Response<GPGetBackupTargetsOfNodeResponse> gpGetBackupTargetsOfNodeAsync(
        @WebParam(name = "nodeId", targetNamespace = "")
        String nodeId);

    /**
     * 
     * @param nodeId
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_getBackupTargetsOfNode")
    @RequestWrapper(localName = "GP_getBackupTargetsOfNode", targetNamespace = "http://dd/", className = "dd.bck.GPGetBackupTargetsOfNode")
    @ResponseWrapper(localName = "GP_getBackupTargetsOfNodeResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetBackupTargetsOfNodeResponse")
    public Future<?> gpGetBackupTargetsOfNodeAsync(
        @WebParam(name = "nodeId", targetNamespace = "")
        String nodeId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPGetBackupTargetsOfNodeResponse> asyncHandler);

    /**
     * 
     * @param nodeId
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod(operationName = "GP_getBackupTargetsOfNode")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GP_getBackupTargetsOfNode", targetNamespace = "http://dd/", className = "dd.bck.GPGetBackupTargetsOfNode")
    @ResponseWrapper(localName = "GP_getBackupTargetsOfNodeResponse", targetNamespace = "http://dd/", className = "dd.bck.GPGetBackupTargetsOfNodeResponse")
    @Action(input = "http://dd/Backup/GP_getBackupTargetsOfNodeRequest", output = "http://dd/Backup/GP_getBackupTargetsOfNodeResponse")
    public List<String> gpGetBackupTargetsOfNode(
        @WebParam(name = "nodeId", targetNamespace = "")
        String nodeId);

    /**
     * 
     * @param metadataRecords
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPAddMetadataResponse>
     */
    @WebMethod(operationName = "GP_addMetadata")
    @RequestWrapper(localName = "GP_addMetadata", targetNamespace = "http://dd/", className = "dd.bck.GPAddMetadata")
    @ResponseWrapper(localName = "GP_addMetadataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPAddMetadataResponse")
    public Response<GPAddMetadataResponse> gpAddMetadataAsync(
        @WebParam(name = "metadataRecords", targetNamespace = "")
        List<String> metadataRecords);

    /**
     * 
     * @param metadataRecords
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_addMetadata")
    @RequestWrapper(localName = "GP_addMetadata", targetNamespace = "http://dd/", className = "dd.bck.GPAddMetadata")
    @ResponseWrapper(localName = "GP_addMetadataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPAddMetadataResponse")
    public Future<?> gpAddMetadataAsync(
        @WebParam(name = "metadataRecords", targetNamespace = "")
        List<String> metadataRecords,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPAddMetadataResponse> asyncHandler);

    /**
     * 
     * @param metadataRecords
     */
    @WebMethod(operationName = "GP_addMetadata")
    @RequestWrapper(localName = "GP_addMetadata", targetNamespace = "http://dd/", className = "dd.bck.GPAddMetadata")
    @ResponseWrapper(localName = "GP_addMetadataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPAddMetadataResponse")
    @Action(input = "http://dd/Backup/GP_addMetadataRequest", output = "http://dd/Backup/GP_addMetadataResponse")
    public void gpAddMetadata(
        @WebParam(name = "metadataRecords", targetNamespace = "")
        List<String> metadataRecords);

    /**
     * 
     * @param nodeId
     * @param targetId
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPAddTargetOfNodeResponse>
     */
    @WebMethod(operationName = "GP_addTargetOfNode")
    @RequestWrapper(localName = "GP_addTargetOfNode", targetNamespace = "http://dd/", className = "dd.bck.GPAddTargetOfNode")
    @ResponseWrapper(localName = "GP_addTargetOfNodeResponse", targetNamespace = "http://dd/", className = "dd.bck.GPAddTargetOfNodeResponse")
    public Response<GPAddTargetOfNodeResponse> gpAddTargetOfNodeAsync(
        @WebParam(name = "nodeId", targetNamespace = "")
        String nodeId,
        @WebParam(name = "targetId", targetNamespace = "")
        String targetId);

    /**
     * 
     * @param nodeId
     * @param asyncHandler
     * @param targetId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_addTargetOfNode")
    @RequestWrapper(localName = "GP_addTargetOfNode", targetNamespace = "http://dd/", className = "dd.bck.GPAddTargetOfNode")
    @ResponseWrapper(localName = "GP_addTargetOfNodeResponse", targetNamespace = "http://dd/", className = "dd.bck.GPAddTargetOfNodeResponse")
    public Future<?> gpAddTargetOfNodeAsync(
        @WebParam(name = "nodeId", targetNamespace = "")
        String nodeId,
        @WebParam(name = "targetId", targetNamespace = "")
        String targetId,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPAddTargetOfNodeResponse> asyncHandler);

    /**
     * 
     * @param nodeId
     * @param targetId
     */
    @WebMethod(operationName = "GP_addTargetOfNode")
    @RequestWrapper(localName = "GP_addTargetOfNode", targetNamespace = "http://dd/", className = "dd.bck.GPAddTargetOfNode")
    @ResponseWrapper(localName = "GP_addTargetOfNodeResponse", targetNamespace = "http://dd/", className = "dd.bck.GPAddTargetOfNodeResponse")
    @Action(input = "http://dd/Backup/GP_addTargetOfNodeRequest", output = "http://dd/Backup/GP_addTargetOfNodeResponse")
    public void gpAddTargetOfNode(
        @WebParam(name = "nodeId", targetNamespace = "")
        String nodeId,
        @WebParam(name = "targetId", targetNamespace = "")
        String targetId);

    /**
     * 
     * @param dependentIp
     * @param antecedentService
     * @return
     *     returns javax.xml.ws.Response<dd.bck.DKLStoreIpDependenceResponse>
     */
    @WebMethod(operationName = "DKL_storeIpDependence")
    @RequestWrapper(localName = "DKL_storeIpDependence", targetNamespace = "http://dd/", className = "dd.bck.DKLStoreIpDependence")
    @ResponseWrapper(localName = "DKL_storeIpDependenceResponse", targetNamespace = "http://dd/", className = "dd.bck.DKLStoreIpDependenceResponse")
    public Response<DKLStoreIpDependenceResponse> dklStoreIpDependenceAsync(
        @WebParam(name = "dependentIp", targetNamespace = "")
        String dependentIp,
        @WebParam(name = "antecedentService", targetNamespace = "")
        String antecedentService);

    /**
     * 
     * @param dependentIp
     * @param asyncHandler
     * @param antecedentService
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "DKL_storeIpDependence")
    @RequestWrapper(localName = "DKL_storeIpDependence", targetNamespace = "http://dd/", className = "dd.bck.DKLStoreIpDependence")
    @ResponseWrapper(localName = "DKL_storeIpDependenceResponse", targetNamespace = "http://dd/", className = "dd.bck.DKLStoreIpDependenceResponse")
    public Future<?> dklStoreIpDependenceAsync(
        @WebParam(name = "dependentIp", targetNamespace = "")
        String dependentIp,
        @WebParam(name = "antecedentService", targetNamespace = "")
        String antecedentService,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<DKLStoreIpDependenceResponse> asyncHandler);

    /**
     * 
     * @param dependentIp
     * @param antecedentService
     */
    @WebMethod(operationName = "DKL_storeIpDependence")
    @RequestWrapper(localName = "DKL_storeIpDependence", targetNamespace = "http://dd/", className = "dd.bck.DKLStoreIpDependence")
    @ResponseWrapper(localName = "DKL_storeIpDependenceResponse", targetNamespace = "http://dd/", className = "dd.bck.DKLStoreIpDependenceResponse")
    @Action(input = "http://dd/Backup/DKL_storeIpDependenceRequest", output = "http://dd/Backup/DKL_storeIpDependenceResponse")
    public void dklStoreIpDependence(
        @WebParam(name = "dependentIp", targetNamespace = "")
        String dependentIp,
        @WebParam(name = "antecedentService", targetNamespace = "")
        String antecedentService);

    /**
     * 
     * @param lastSuccessfulyTransferedBackupData
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPMultihopGetBackupDataResponse>
     */
    @WebMethod(operationName = "GP_Multihop_getBackupData")
    @RequestWrapper(localName = "GP_Multihop_getBackupData", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetBackupData")
    @ResponseWrapper(localName = "GP_Multihop_getBackupDataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetBackupDataResponse")
    public Response<GPMultihopGetBackupDataResponse> gpMultihopGetBackupDataAsync(
        @WebParam(name = "lastSuccessfulyTransferedBackupData", targetNamespace = "")
        List<String> lastSuccessfulyTransferedBackupData);

    /**
     * 
     * @param lastSuccessfulyTransferedBackupData
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_Multihop_getBackupData")
    @RequestWrapper(localName = "GP_Multihop_getBackupData", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetBackupData")
    @ResponseWrapper(localName = "GP_Multihop_getBackupDataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetBackupDataResponse")
    public Future<?> gpMultihopGetBackupDataAsync(
        @WebParam(name = "lastSuccessfulyTransferedBackupData", targetNamespace = "")
        List<String> lastSuccessfulyTransferedBackupData,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPMultihopGetBackupDataResponse> asyncHandler);

    /**
     * 
     * @param lastSuccessfulyTransferedBackupData
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod(operationName = "GP_Multihop_getBackupData")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GP_Multihop_getBackupData", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetBackupData")
    @ResponseWrapper(localName = "GP_Multihop_getBackupDataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetBackupDataResponse")
    @Action(input = "http://dd/Backup/GP_Multihop_getBackupDataRequest", output = "http://dd/Backup/GP_Multihop_getBackupDataResponse")
    public List<String> gpMultihopGetBackupData(
        @WebParam(name = "lastSuccessfulyTransferedBackupData", targetNamespace = "")
        List<String> lastSuccessfulyTransferedBackupData);

    /**
     * 
     * @param backupData
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPMultihopStoreBackupDataResponse>
     */
    @WebMethod(operationName = "GP_Multihop_storeBackupData")
    @RequestWrapper(localName = "GP_Multihop_storeBackupData", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopStoreBackupData")
    @ResponseWrapper(localName = "GP_Multihop_storeBackupDataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopStoreBackupDataResponse")
    public Response<GPMultihopStoreBackupDataResponse> gpMultihopStoreBackupDataAsync(
        @WebParam(name = "backupData", targetNamespace = "")
        List<String> backupData);

    /**
     * 
     * @param backupData
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_Multihop_storeBackupData")
    @RequestWrapper(localName = "GP_Multihop_storeBackupData", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopStoreBackupData")
    @ResponseWrapper(localName = "GP_Multihop_storeBackupDataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopStoreBackupDataResponse")
    public Future<?> gpMultihopStoreBackupDataAsync(
        @WebParam(name = "backupData", targetNamespace = "")
        List<String> backupData,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPMultihopStoreBackupDataResponse> asyncHandler);

    /**
     * 
     * @param backupData
     */
    @WebMethod(operationName = "GP_Multihop_storeBackupData")
    @RequestWrapper(localName = "GP_Multihop_storeBackupData", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopStoreBackupData")
    @ResponseWrapper(localName = "GP_Multihop_storeBackupDataResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopStoreBackupDataResponse")
    @Action(input = "http://dd/Backup/GP_Multihop_storeBackupDataRequest", output = "http://dd/Backup/GP_Multihop_storeBackupDataResponse")
    public void gpMultihopStoreBackupData(
        @WebParam(name = "backupData", targetNamespace = "")
        List<String> backupData);

    /**
     * 
     * @param exceptionMessage
     * @param faultTimestamp
     * @param clientProcessId
     * @param exceptionType
     * @param exceptionCauseType
     * @param conversationId
     * @param frontEndServiceId
     * @param faultType
     * @param exceptionCauseMessage
     * @return
     *     returns javax.xml.ws.Response<dd.bck.MonitorRecordClientConversationFaultResponse>
     */
    @WebMethod(operationName = "Monitor_recordClientConversationFault")
    @RequestWrapper(localName = "Monitor_recordClientConversationFault", targetNamespace = "http://dd/", className = "dd.bck.MonitorRecordClientConversationFault")
    @ResponseWrapper(localName = "Monitor_recordClientConversationFaultResponse", targetNamespace = "http://dd/", className = "dd.bck.MonitorRecordClientConversationFaultResponse")
    public Response<MonitorRecordClientConversationFaultResponse> monitorRecordClientConversationFaultAsync(
        @WebParam(name = "conversationId", targetNamespace = "")
        int conversationId,
        @WebParam(name = "clientProcessId", targetNamespace = "")
        String clientProcessId,
        @WebParam(name = "frontEndServiceId", targetNamespace = "")
        String frontEndServiceId,
        @WebParam(name = "faultTimestamp", targetNamespace = "")
        long faultTimestamp,
        @WebParam(name = "faultType", targetNamespace = "")
        String faultType,
        @WebParam(name = "exceptionType", targetNamespace = "")
        String exceptionType,
        @WebParam(name = "exceptionMessage", targetNamespace = "")
        String exceptionMessage,
        @WebParam(name = "exceptionCauseType", targetNamespace = "")
        String exceptionCauseType,
        @WebParam(name = "exceptionCauseMessage", targetNamespace = "")
        String exceptionCauseMessage);

    /**
     * 
     * @param exceptionMessage
     * @param faultTimestamp
     * @param clientProcessId
     * @param exceptionType
     * @param exceptionCauseType
     * @param conversationId
     * @param asyncHandler
     * @param frontEndServiceId
     * @param faultType
     * @param exceptionCauseMessage
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "Monitor_recordClientConversationFault")
    @RequestWrapper(localName = "Monitor_recordClientConversationFault", targetNamespace = "http://dd/", className = "dd.bck.MonitorRecordClientConversationFault")
    @ResponseWrapper(localName = "Monitor_recordClientConversationFaultResponse", targetNamespace = "http://dd/", className = "dd.bck.MonitorRecordClientConversationFaultResponse")
    public Future<?> monitorRecordClientConversationFaultAsync(
        @WebParam(name = "conversationId", targetNamespace = "")
        int conversationId,
        @WebParam(name = "clientProcessId", targetNamespace = "")
        String clientProcessId,
        @WebParam(name = "frontEndServiceId", targetNamespace = "")
        String frontEndServiceId,
        @WebParam(name = "faultTimestamp", targetNamespace = "")
        long faultTimestamp,
        @WebParam(name = "faultType", targetNamespace = "")
        String faultType,
        @WebParam(name = "exceptionType", targetNamespace = "")
        String exceptionType,
        @WebParam(name = "exceptionMessage", targetNamespace = "")
        String exceptionMessage,
        @WebParam(name = "exceptionCauseType", targetNamespace = "")
        String exceptionCauseType,
        @WebParam(name = "exceptionCauseMessage", targetNamespace = "")
        String exceptionCauseMessage,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<MonitorRecordClientConversationFaultResponse> asyncHandler);

    /**
     * 
     * @param exceptionMessage
     * @param faultTimestamp
     * @param clientProcessId
     * @param exceptionType
     * @param exceptionCauseType
     * @param conversationId
     * @param frontEndServiceId
     * @param faultType
     * @param exceptionCauseMessage
     */
    @WebMethod(operationName = "Monitor_recordClientConversationFault")
    @RequestWrapper(localName = "Monitor_recordClientConversationFault", targetNamespace = "http://dd/", className = "dd.bck.MonitorRecordClientConversationFault")
    @ResponseWrapper(localName = "Monitor_recordClientConversationFaultResponse", targetNamespace = "http://dd/", className = "dd.bck.MonitorRecordClientConversationFaultResponse")
    @Action(input = "http://dd/Backup/Monitor_recordClientConversationFaultRequest", output = "http://dd/Backup/Monitor_recordClientConversationFaultResponse")
    public void monitorRecordClientConversationFault(
        @WebParam(name = "conversationId", targetNamespace = "")
        int conversationId,
        @WebParam(name = "clientProcessId", targetNamespace = "")
        String clientProcessId,
        @WebParam(name = "frontEndServiceId", targetNamespace = "")
        String frontEndServiceId,
        @WebParam(name = "faultTimestamp", targetNamespace = "")
        long faultTimestamp,
        @WebParam(name = "faultType", targetNamespace = "")
        String faultType,
        @WebParam(name = "exceptionType", targetNamespace = "")
        String exceptionType,
        @WebParam(name = "exceptionMessage", targetNamespace = "")
        String exceptionMessage,
        @WebParam(name = "exceptionCauseType", targetNamespace = "")
        String exceptionCauseType,
        @WebParam(name = "exceptionCauseMessage", targetNamespace = "")
        String exceptionCauseMessage);

    /**
     * 
     * @param fromTimestamp
     * @param toTimestamp
     * @return
     *     returns javax.xml.ws.Response<dd.bck.GPMultihopGetSystemDGResponse>
     */
    @WebMethod(operationName = "GP_Multihop_getSystemDG")
    @RequestWrapper(localName = "GP_Multihop_getSystemDG", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetSystemDG")
    @ResponseWrapper(localName = "GP_Multihop_getSystemDGResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetSystemDGResponse")
    public Response<GPMultihopGetSystemDGResponse> gpMultihopGetSystemDGAsync(
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp);

    /**
     * 
     * @param fromTimestamp
     * @param asyncHandler
     * @param toTimestamp
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "GP_Multihop_getSystemDG")
    @RequestWrapper(localName = "GP_Multihop_getSystemDG", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetSystemDG")
    @ResponseWrapper(localName = "GP_Multihop_getSystemDGResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetSystemDGResponse")
    public Future<?> gpMultihopGetSystemDGAsync(
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GPMultihopGetSystemDGResponse> asyncHandler);

    /**
     * 
     * @param fromTimestamp
     * @param toTimestamp
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod(operationName = "GP_Multihop_getSystemDG")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "GP_Multihop_getSystemDG", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetSystemDG")
    @ResponseWrapper(localName = "GP_Multihop_getSystemDGResponse", targetNamespace = "http://dd/", className = "dd.bck.GPMultihopGetSystemDGResponse")
    @Action(input = "http://dd/Backup/GP_Multihop_getSystemDGRequest", output = "http://dd/Backup/GP_Multihop_getSystemDGResponse")
    public List<String> gpMultihopGetSystemDG(
        @WebParam(name = "fromTimestamp", targetNamespace = "")
        long fromTimestamp,
        @WebParam(name = "toTimestamp", targetNamespace = "")
        long toTimestamp);

}
